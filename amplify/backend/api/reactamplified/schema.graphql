type Response @model @auth(rules: [{allow: public}]) {
  id: ID!
  data: String
  Question: Question @hasOne
  sessionID: ID! @index(name: "bySession", sortKeyFields: ["data"])
}

type Session @model @auth(rules: [{allow: public}]) {
  id: ID!
  data: String
  Exam: Exam @hasOne
  Responses: [Response] @hasMany(indexName: "bySession", fields: ["id"])
}

type Exam @model @auth(rules: [{allow: public}]) {
  id: ID!
  date: AWSDateTime
  org: String
  data: String
  Test: Test @hasOne
}

type Test @model @auth(rules: [{allow: public}]) @searchable {
  id: ID!
  data: String
  Questions: [Question] @manyToMany(relationName: "TestQuestion")
}

type Choice {
  key: Int
  value: String
}

type Question @model @auth(rules: [{allow: public}]) @searchable {
  id: ID!
  prompt: String!
  data: String
  choices: [Choice]
  key: Int!
  tests: [Test] @manyToMany(relationName: "TestQuestion")
}

type ExamEmail @model @auth(rules: [{allow: public}]) {
  id: ID!
  examLink: String!
  toAddress: String!
  fromAddress: String!
  subject: String!
  body: String!
}
 